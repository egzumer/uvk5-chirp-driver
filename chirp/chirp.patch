diff --git a/chirp/wxui/main.py b/chirp/wxui/main.py
index bc599144..a1381603 100644
--- a/chirp/wxui/main.py
+++ b/chirp/wxui/main.py
@@ -506,7 +506,7 @@ class ChirpMain(wx.Frame):
             return
 
         def _detach(event):
-            new = ChirpMain(None, title='CHIRP')
+            new = ChirpMain(None, title='CHIRP egzumer')
             self._editors.RemovePage(selected)
             eset.Reparent(new._editors)
             new.add_editorset(eset)
@@ -1094,9 +1094,9 @@ class ChirpMain(wx.Frame):
             is_memedit = isinstance(eset.current_editor, memedit.ChirpMemEdit)
             is_bank = isinstance(eset.current_editor, bankedit.ChirpBankEdit)
             can_edit = not is_network
-            self.SetTitle('CHIRP (%s)' % os.path.basename(eset.filename))
+            self.SetTitle('CHIRP egzumer (%s)' % os.path.basename(eset.filename))
         else:
-            self.SetTitle('CHIRP')
+            self.SetTitle('CHIRP egzumer')
 
         if self.current_editorset:
             radio = self.current_editorset.radio
@@ -1640,7 +1640,7 @@ class ChirpMain(wx.Frame):
 
     def _menu_about(self, event):
         pyver = sys.version_info
-        aboutinfo = 'CHIRP %s on Python %s wxPython %s' % (
+        aboutinfo = 'CHIRP egzumer %s\non Python %s\nwxPython %s' % (
             CHIRP_VERSION,
             '%s.%s.%s' % (pyver.major, pyver.minor, pyver.micro),
             wx.version())
@@ -1768,8 +1768,8 @@ def display_update_notice(version):
 
     CONF.set_int("last_update_check", int(time.time()), "state")
 
-    url = 'https://chirp.danplanet.com/projects/chirp/wiki/ChirpNextBuild'
-    msg = _('A new CHIRP version is available. Please visit the '
+    url = 'https://github.com/egzumer/uvk5-chirp-driver/releases'
+    msg = _('A new CHIRP egzumer version is available. Please visit the '
             'website as soon as possible to download it!')
     d = wx.MessageDialog(None, msg, _('New version available'),
                          style=wx.OK | wx.CANCEL | wx.ICON_INFORMATION)
diff --git a/chirp/wxui/report.py b/chirp/wxui/report.py
index d2ca7711..d0e4dfc0 100644
--- a/chirp/wxui/report.py
+++ b/chirp/wxui/report.py
@@ -102,8 +102,8 @@ def with_session(fn):
 
 @with_session
 def check_for_updates(session, callback):
-    r = session.get('%s/latest' % BASE)
-    callback(r.json()['latest'])
+    r = session.get("https://api.github.com/repos/egzumer/uvk5-chirp-driver/releases/latest")
+    callback(r.json()['tag_name'])
 
 
 @with_session
diff --git a/chirp/drivers/__init__.py b/chirp/drivers/__init__.py
index 649f85ab..c8940547 100644
--- a/chirp/drivers/__init__.py
+++ b/chirp/drivers/__init__.py
@@ -1,16 +1,8 @@
-import os
 import sys
-from glob import glob
-import warnings
+import pkgutil
 
-# This won't be here in the frozen build because we convert this file to
-# a static list of driver modules to import.
-warnings.filterwarnings('once', category=DeprecationWarning,
-                        module=__name__)
-
-module_dir = os.path.dirname(sys.modules["chirp.drivers"].__file__)
+module_dir = sys.modules["chirp.drivers"].__path__
 __all__ = []
-for i in sorted(glob(os.path.join(module_dir, "*.py"))):
-    name = os.path.basename(i)[:-3]
-    if not name.startswith("__"):
-        __all__.append(name)
+for i in pkgutil.iter_modules(module_dir):
+    __all__.append(i.name)
+__all__.sort()
diff --git a/chirp/directory.py b/chirp/directory.py
index e25ae10d..618e2cf1 100644
--- a/chirp/directory.py
+++ b/chirp/directory.py
@@ -14,10 +14,9 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-import glob
 import os
 import logging
-import sys
+import chirp.drivers
 
 from chirp import chirp_common, errors
 
@@ -172,27 +171,10 @@ def get_radio_by_image(image_file):
 
 
 def import_drivers(limit=None):
-    frozen = getattr(sys, 'frozen', False)
-    if sys.platform == 'win32' and frozen:
-        # We are in a frozen win32 build, so we can not glob
-        # the driver files, but we do not need to anyway
-        import chirp.drivers
-        for module in chirp.drivers.__all__:
-            try:
-                __import__('chirp.drivers.%s' % module)
-            except Exception as e:
-                print('Failed to import %s: %s' % (module, e))
-        return
-
-    # Safe import of everything in chirp/drivers. We need to import them
-    # to get them to register, but should not abort if one import fails
-    chirp_module_base = os.path.dirname(os.path.abspath(__file__))
-    driver_files = glob.glob(os.path.join(chirp_module_base,
-                                          'drivers',
-                                          '*.py'))
-    for driver_file in driver_files:
-        module, ext = os.path.splitext(driver_file)
-        driver_module = os.path.basename(module)
-        if limit and driver_module not in limit:
+    for module in chirp.drivers.__all__:
+        if limit and module not in limit:
             continue
-        __import__('chirp.drivers.%s' % driver_module)
+        try:
+            __import__('chirp.drivers.%s' % module)
+        except Exception as e:
+            print('Failed to import %s: %s' % (module, e))
